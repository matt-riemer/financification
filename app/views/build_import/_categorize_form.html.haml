.row
  .col-xs-7
    = render 'items/item', item: f.object
  .col-xs-5
    = f.input :note, label: false, placeholder: 'Item Note'

.row
  .col-sm-5
    %p Assign existing category:
    = f.input :category_id, label: false, required: false, as: :effective_select, input_js: { placeholder: 'Choose Category' },
      collection: item_category_collection(f.object), grouped: true

  .col-sm-2.text-center
    %br
    %br
    %p or
  .col-sm-5
    %p Create new category:
    = f.simple_fields_for :category, (f.object.category || Category.new) do |fc|
      = fc.input :name, label: false, required: false, placeholder: 'New Category Name'
      = fc.input :category_group_id, required: false, label: false, as: :effective_select, input_js: { placeholder: 'Under Category Group' },
        collection: item_category_group_collection(f.object)

.text-center
  = f.button :submit, 'Save and Continue', class: 'btn btn-primary', data: { disable_with: 'Saving...' }

%hr
%p Optionally, create a new rule to categorize future items:

= f.simple_fields_for :rule, (f.object.rule || Rule.new) do |fr|
  .row
    .col-sm-6
      = fr.input :match_name, label: 'when name includes:'
      .row
        .col-sm-10
          = fr.input :name, label: false, required: false
        .col-sm-2
          = link_to 'Snip', '#', class: 'btn btn-default', 'data-snip' => true

  .row
    .col-sm-6
      = fr.input :match_price, label: 'and, when price is:'
      .row
        .col-sm-5= fr.input :price_min, label: false, required: false
        .col-sm-2.text-center to
        .col-sm-5= fr.input :price_max, label: false, required: false

  .row
    .col-sm-6
      = fr.input :match_date, label: 'and, when date is:'
      .row
        .col-sm-5= fr.input :start_at, as: :effective_date_picker, label: false, required: false
        .col-sm-2.text-center to
        .col-sm-5= fr.input :end_at, as: :effective_date_picker, label: false, required: false
