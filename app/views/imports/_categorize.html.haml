%h2 Categorize items
%p Please create rules that categorize the following #{pluralize(f.object.uncategorized_items.length, 'item')}:

= f.simple_fields_for :rules, f.object.new_rules do |fr|
  .import-rule{style: ('display: none;' if fr.object.valid?)}
    .row
      .col-sm-4
        .row
          .col-sm-12= fr.object.item.name
        .row
          .col-sm-4= fr.object.item.date&.strftime('%F')
          .col-sm-4
            - if fr.object.item.debit
              = price_to_currency(fr.object.item.debit)
          .col-sm-4
            - if fr.object.item.credit
              = price_to_currency(fr.object.item.credit)
        .row
          .col-sm-12= fr.object.item.note

      .col-sm-7
        = fr.input :user_id, as: :hidden
        = fr.input :item_key, as: :hidden

        .row
          .col-sm-3.text-right Assign category:
          .col-sm-9
            .import-category
              .import-category-switch
                = link_to '#', title: 'Switch' do
                  %span.glyphicon.glyphicon-random

              .import-category-exists{style: ('display: none' if fr.object.category && fr.object.category.errors.present?)}
                = fr.input :category_id, label: false, required: false, as: :effective_select, input_js: { placeholder: 'Choose Category' },
                  collection: Category.sorted.all

              .import-category-create{style: ('display: none' unless fr.object.category && fr.object.category.errors.present?)}
                = fr.simple_fields_for :category, (fr.object.category || fr.object.build_category) do |fc|
                  = fc.input :user_id, as: :hidden, input_html: { value: (fc.object.user_id || fr.object.user_id) }
                  = fc.input :name, label: false, required: false, placeholder: 'New Category Name'
                  .row
                    .col-sm-8
                      = fc.input :heading, label: false, required: false, as: :effective_select, input_js: { placeholder: 'Heading' },
                        collection: Category.sorted.pluck(:heading).uniq.sort
                    .col-sm-4
                      = fc.input :debit_or_credit, label: false, required: false, as: :effective_radio_buttons, inline: true,
                        collection: ['Debit', 'Credit'], checked: fc.object.debit_or_credit

        .row
          .col-sm-3.text-right when name includes:
          .col-sm-7= fr.input :name_includes, label: false, required: false
          .col-sm-2.text-right= link_to 'Snip', '#', class: 'btn btn-default', 'data-snip' => true

      .col-sm-1
        = link_to 'Skip', '#', class: 'btn btn-primary', 'data-skip' => true

%hr
